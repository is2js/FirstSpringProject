<div id="comments-list">
    {{#commentDtos}}
        <!--반복문 속 개별 댓글 -->
        <div id="comments-{{id}}" class="card m-2">
            <div class="card-header">
                {{nickname}}
                <!-- 댓글 수정 모달 트리거 버튼 -->
                <button type="button"
                        class="btn btn-outline-primary btn-sm"
                        data-bs-toggle="modal"
                        data-bs-target="#comment-edit-modal"
                        data-bs-id="{{id}}"
                        data-bs-nickname="{{nickname}}"
                        data-bs-body="{{body}}"
                        data-bs-article-id="{{articleId}}">
                    수정
                </button>
                <!--25-1. 삭제 버튼 추가-->
                <!--button[type="button"].btn.btn-sm.btn-outline-danger{삭제}-->
                <!-- <button type="button" class="btn btn-sm btn-outline-danger">삭제</button> -->
                <!--25-4. 여러개 생기는 삭제버튼에 대해 id가 아닌 class추가(comment-delete-btn)를 추가하여 변수화가능하게 해주기-->
                <!-- <button type="button" class="btn btn-sm btn-outline-danger comment-delete-btn">삭제</button>-->
                <!--25-7. 삭제요청에 필요한 개별댓글id를 버튼태그의 id=""가 아니라 `data-domain-id`의 새로운 속성으로 추가해준다.-->
                <button type="button"
                        class="btn btn-sm btn-outline-danger comment-delete-btn"
                        data-comment-id="{{id}}">
                    삭제
                </button>
            </div>
            <div class="card-body"> {{body}} </div>
        </div>
    {{/commentDtos}}
</div>


<!-- 댓글 수정 모달 -->
<div class="modal fade" id="comment-edit-modal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">댓글 수정</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- 댓글 수정 form (from 생성 form)-->
                <!--   생성form과 다르게, 데이터바깥영역에서 대기 중인 modal은 hidden input value 비워두고, 트리거 버튼을 통해 받음 -->
                <form>
                    <!--input nickname-->
                    <div class="mb-3">
                        <label for="new-comment-nickname" class="form-label">nickname</label>
                        <input type="text" id="edit-comment-nickname" class="form-control form-control-sm">
                    </div>

                    <!--body-->
                    <div class="mb-3">
                        <label for="edit-comment-body" class="form-label">body</label>
                        <textarea id="edit-comment-body"
                                  rows="3"
                                  class="form-control form-control-sm"></textarea>
                    </div>

                    <!-- hidden input 2개 (게시글id(fk), 댓글id(pk)  with no value -->
                    <!--   생성form과 다르게, 데이터바깥영역에서 대기 중인 modal은 hidden input value 비워두고, 트리거 버튼을 통해 받음 -->
                    <input type="hidden" id="edit-comment-article-id">
                    <input type="hidden" id="edit-comment-id">

                    <!-- button -->
                    <button id="comment-update-btn" class="btn btn-outline-primary btn-sm" type="button">댓글 수정</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!--모달 이벤트 처리-->
<script>
    {
        //(1) 데이터를 받을 modal 변수화
        const commentEditModal = document.querySelector("#comment-edit-modal");
        //(2) modal 변수화 이후 모달트리거버튼 열림 이벤트 감지( show.bs.modal )
        //  - 일반 button은 click event를 감지했으나, boostrap modal은 트리거버튼은 이벤트 자동이고, modal에서 수동적으로 트리거버튼의 클릭을 감지한다.
        //  - button의 클릭이벤트는 데이터를 받을 일이 없어서 -> event를 인자로 받지않았지만,
        //    modal은 트리거버튼 event를 인자로 받아야 -> 그 내부의 데이터를 받을 수 있다.
        //  - boostrap js예제에 나와있는, show.bs.modal이라는 이벤트를 감지한다.
        commentEditModal.addEventListener("show.bs.modal", function (event) {
            // 24-5. 트리거버튼을 통해 받는 event가 뭔지 콘솔로 먼저 찍어본다. 그래야 내부 데이터를 받아올 수 있을 것이다.
            // console.log("모달이 열렸습니다");
            // 24-6. 부트스트랩 문서를 보면 event.relatedTarget를 통해 모달트리거버튼을 통째로 받을 수 있다고 한다.
            //       원래 있는 필드값은 아니라서 .relatedTarget는 자동완성이 안된다.
            // console.log(event.relatedTarget);
            // 24-7. 모달트리거버튼을 통째로 받을 수 있다면 변수화해서 받아와 -> 속성들을 값으로 뽑아온다.
            // 받은 모달 트리거 버튼 변수화
            const triggerBtn = event.relatedTarget;
            // 모달 트리거 버튼 속성 데이터 가져오기
            const id = triggerBtn.getAttribute("data-bs-id");
            const articleId = triggerBtn.getAttribute("data-bs-article-id");
            const nickname = triggerBtn.getAttribute("data-bs-nickname");
            const body = triggerBtn.getAttribute("data-bs-body");

            //데이터를 modal 속 수정form에 입력하기 by id+querySelector
            document.querySelector("#edit-comment-id").value = id;
            document.querySelector("#edit-comment-article-id").value = articleId;
            document.querySelector("#edit-comment-nickname").value = nickname;
            document.querySelector("#edit-comment-body").value = body;
        });
    }

    // 24-8. 수정완료 버튼 변수화 -> 클릭이벤트 감지 -> restAPI에 수정 요청한다.
    {
        // 수정완료버튼 변수화
        const commentUpdateBtn = document.querySelector("#comment-update-btn");

        // 클릭 이벤트 감지 및 fetch요청
        // - click event는 데이터를 받아올 일이 없어서 function() {}의 event인자를 줘도 되고 안줘도 된다.
        commentUpdateBtn.addEventListener("click", function (event) {
            //fetch전, 수정 요청 댓글 데이터 js객체 생성
            const comment = {
                id: document.querySelector("#edit-comment-id").value,
                article_id: document.querySelector("#edit-comment-article-id").value,
                nickname: document.querySelector("#edit-comment-nickname").value,
                body: document.querySelector("#edit-comment-body").value
            }
            //console.log(comment);

            // 수정 REST API 호출 by fetch() -> url, 통신js객체 블록{}
            const url = "/api/comments/" + comment.id;
            fetch(url, {
                method: "PATCH", // PATCH요청 소문자 쓰면 안됨
                body: JSON.stringify(comment), // js객체 -> JSON으로 전달
                headers: {
                    "Content-Type": "application/json"
                }
                //}); // 요청까지만 작성하고, 응답 로직 작성 전, log + 실db를 확인한다.
                // 요청응답이 왔을 때, `function(response) { 로직 }`로 함수를 실행시켜 로직을 수행하지만, `람다식 response => {} `로 줄인 것이다.
            }).then(response => {
                //http 응답 코드에 따른 메세지 출력
                const msg = (response.ok) ? "댓글이 수정되었습니다." : "댓글 수정 실패!";
                alert(msg);
                //새로고침
                window.location.reload();
            })
        });
    }
</script>

<!-- 댓글 삭제버튼 처리-->
<script>
    {
        // 삭제버튼[들]을 변수화해서 가져온다.
        const commentDeleteBtns = document.querySelectorAll(".comment-delete-btn");

        //삭제 버튼들 -> 반복문 -> 클릭 이벤트 처리 -> 삭제할 댓글 id 가져오기
        commentDeleteBtns.forEach(btn => {
            btn.addEventListener("click", (event) => {
                // 이벤트 발생 요소(삭제버튼) 선택
                const commentDeleteBtn = (event.target) ? event.target : event.srcElement; // deeprecated가 뜨는데, 검색해보니 event.target으로 이제 바뀐 것 같다. var eventObject = (event.target)?event.target:event.srcElement;
                // 속성에 박힌 댓글id 가져오기
                const commentId = commentDeleteBtn.getAttribute("data-comment-id");
                console.log(`삭제 버튼 클릭: ${commentId}`);

                // 가져온 id로 삭제요청 하기 by fetch(url, 통신객체블럭{})
                // - body(data) + headers(datatype)없이 method만 통신정보 js객체에 명시해주면 된다.
                const url = `/api/comments/${commentId}`;

                fetch(url, {
                    method: "DELETE"
                }).then(response => {
                    // 댓글 삭제 실패 처리
                    if (!response.ok) {
                        alert("댓글 삭제 실패!")
                        return;
                    }
                    // 삭제 성공 응답의 경우
                    const target = document.querySelector(`#comments-${commentId}`);
                    target.remove();
                });
            });
        });
    }
</script>
